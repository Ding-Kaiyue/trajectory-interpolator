name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        cpp: [17, 20]
        build_type: [Debug, Release]
        ros2: [true, false]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev curl gnupg2 lsb-release
        
        if [ "${{ matrix.ros2 }}" = "true" ]; then
          # Add ROS2 Humble repository
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update && sudo apt-get install -y curl gnupg2 lsb-release
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y ros-humble-ament-cmake ros-humble-rclcpp ros-humble-trajectory-msgs ros-humble-moveit-msgs ros-humble-builtin-interfaces
        fi
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp }} \
          -DUSE_ROS2_MESSAGES=${{ matrix.ros2 }}
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        if [ "${{ matrix.ros2 }}" = "true" ]; then
          source /opt/ros/humble/setup.bash
        fi
        ctest --output-on-failure
    
    - name: Run examples
      run: |
        cd build
        if [ "${{ matrix.ros2 }}" = "true" ]; then
          source /opt/ros/humble/setup.bash
        fi
        ./bin/basic_interpolation_example
    
    - name: Create release package
      run: |
        chmod +x create_release_package.sh
        ./create_release_package.sh
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trajectory-interpolator-${{ matrix.cpp }}-${{ matrix.build_type }}-ros2-${{ matrix.ros2 }}
        path: |
          trajectory_interpolator_*.tar.gz
          *.deb
          build/lib/
          build/bin/
          build/tests/
    
    - name: Code quality check
      run: |
        # 检查代码格式
        find . -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "Code formatting check skipped - clang-format not available"
        
        # 检查CMakeLists.txt语法
        cd build
        cmake --build . --target help > /dev/null 